@using Models.Entities
@model IEnumerable<OrderViewModel>
@{
	ViewData["Title"] = "Orders";
	Layout = "_DashboardLayout";
}

@functions {
	string GetStatusColor(OrderStatus status) => status switch
	{
		OrderStatus.Serving => "warning",
		OrderStatus.Reservation => "info",
		OrderStatus.Paid => "success",
		OrderStatus.Cancelled => "secondary",
	};

	string GetStatusColor(OrderItemStatus status) => status switch
	{
		OrderItemStatus.Reservation => "info",
		OrderItemStatus.Pending => "warning",
		OrderItemStatus.Preparing => "primary",
		OrderItemStatus.Ready => "success",
		OrderItemStatus.Served => "dark",
	};
}

<h1 class="mb-4 text-center">Orders</h1>

<div class="accordion" id="accordion">

	@foreach (var order in Model)
	{
		<div class="accordion-item">
			<h2 class="accordion-header">
				<button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse@(order.OrderId)" aria-expanded="false" aria-controls="collapse@(order.OrderId)">
					<dl class="row w-100">
						<dt class="col-sm-4">Order ID</dt>
						<dd class="col-sm-8">@(order.OrderId)</dd>

						<dt class="col-sm-4">Table Name</dt>
						<dd class="col-sm-8">@(order.Table?.TableName)</dd>

						<dt class="col-sm-4">Created At</dt>
						<dd class="col-sm-8">@(order.CreatedAt.ToString("g"))</dd>

						<dt class="col-sm-4">Order Status</dt>
						<dd class="col-sm-8 fw-bold text-@GetStatusColor(order.Status)">@(order.Status)</dd>

						@if (order.Status == Models.Entities.OrderStatus.Reservation && order.Reservation != null)
						{
							<dt class="col-sm-4">Reservation Time</dt>
							<dd class="col-sm-8">@(new DateTime(order.Reservation.ResDate, order.Reservation.ResTime).ToString("g"))</dd>
						}

					</dl>
				</button>
			</h2>
			<div id="collapse@(order.OrderId)" class="accordion-collapse collapse" data-bs-parent="#accordion">
				<div class="accordion-body">
					<ul class="list-group">

						@foreach (var item in order.OrderItems)
						{
							<li class="list-group-item list-group-item-@GetStatusColor(item.Status)">
								<dl class="row">

									<dt class="col-sm-4">Dish Name</dt>
									<dd class="col-sm-8">@(item.Dish?.DishName)</dd>

									<dt class="col-sm-4">Quantity</dt>
									<dd class="col-sm-8">@(item.Quantity)</dd>

									<dt class="col-sm-4">Order Item Status</dt>
									<dd class="col-sm-8 fw-bold d-flex justify-content-between">
										<span>@(item.Status)</span>
										@if (item.Status == OrderItemStatus.Pending || item.Status == OrderItemStatus.Preparing)
										{
											<button onclick='changeStatus(@item.OrItemId)' class="btn btn-primary">Change Status</button>
										}
									</dd>

									<dt class="col-sm-4">Notes</dt>
									<dd class="col-sm-8">@(item.Notes ?? "None")</dd>

								</dl>
							</li>
						}

					</ul>
				</div>
			</div>
		</div>
	}
</div>

<div class="modal fade" id="modal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="modalLabel" aria-hidden="true">
	<div class="modal-dialog modal-dialog-centered modal-lg modal-dialog-scrollable">
		<div class="modal-content" id="modalContent">
		</div>
	</div>
</div>

@section Scripts {
	<script>
		function changeStatus(id) {
			var url = '@Url.Action("ChangeStatus", "Order", new { orderItemId = "__id__" })'.replace("__id__", id);
			$.get(url, function (response) {
				$('#modalContent').html(response);
				$('#modal').modal('show');
			});
		}
	</script>
}