@using System.Globalization
@using Models.Entities
@model IEnumerable<ScheduleViewModel>
@{
	ViewData["Title"] = "Schedules";
	Layout = "_DashboardLayout";
}

@{
	var userIdString = User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
	var requestWeek = string.IsNullOrWhiteSpace(Context.Request.Query["week"]) ? GetCurrentWeek() : Context.Request.Query["week"].ToString();

	static string GetCurrentWeek()
	{
		DateTime today = DateTime.Now;
		CultureInfo culture = CultureInfo.InvariantCulture;
		Calendar calendar = culture.Calendar;

		int weekNumber = culture.Calendar.GetWeekOfYear(
			today,
			CalendarWeekRule.FirstFourDayWeek,
			DayOfWeek.Monday
		);

		return $"{today.Year}-W{weekNumber:D2}";
	}

	static DateTime GetStartOfWeek(int year, int weekNumber)
	{
		// Start with January 4th of the given year (always in the first ISO week)
		DateTime jan4 = new DateTime(year, 1, 4);

		// Find the Monday of that week
		DateTime startOfFirstWeek = jan4.AddDays(-(int)(jan4.DayOfWeek == DayOfWeek.Sunday ? 7 : jan4.DayOfWeek - DayOfWeek.Monday));

		// Add the number of weeks minus one to get the desired week's Monday
		return startOfFirstWeek.AddDays((weekNumber - 1) * 7);
	}

	static List<DateOnly> GetWeekDates(string? week)
	{
		if (string.IsNullOrWhiteSpace(week)) return new();

		try
		{
			var weekDates = new List<DateOnly>();
			var weekParts = week.Split('-');

			if (!int.TryParse(weekParts[0], out var year) || !int.TryParse(weekParts[1].Replace("W", ""), out var weekNumber))
			{
				return new();
			}

			var startOfWeek = GetStartOfWeek(year, weekNumber);
			DateOnly weekStartDate = DateOnly.FromDateTime(startOfWeek);
			for (int i = 0; i < 7; i++)
			{
				weekDates.Add(weekStartDate);
				weekStartDate = weekStartDate.AddDays(1);
			}
			return weekDates;
		}
		catch (Exception)
		{
			return new();
		}
	}

	var currentDate = DateOnly.FromDateTime(DateTime.Now);
	var weekDates = GetWeekDates(requestWeek);
	var weekSchedules = weekDates.Any() ? Model.Where(s => s.ScheDate >= weekDates[0] && s.ScheDate <= weekDates[6])
								.GroupBy(s => s.EmployeeName) : null;

	var roleScheduleGroups = Model.Where(s => s.ScheDate >= weekDates[0] && s.ScheDate <= weekDates[6]).GroupBy(s => s.Role == Role.Manager);

	void RenderScheduleCells(IEnumerable<ScheduleViewModel> roleGroup)
	{
		foreach (var employeeSchedules in roleGroup.GroupBy(s => s.EmpId))
		{
			<tr>
				<td class="fw-bold text-center align-middle fs-4">
					@employeeSchedules.First().EmployeeName <br />
					(@employeeSchedules.First().Role)
				</td>
				@for (var i = 0; i < 7; i++)
				{
					var schedulesForDate = employeeSchedules.Where(s => s.ScheDate == weekDates[i]).OrderBy(t => t.StartTime);
					if (schedulesForDate.Any())
					{
						<td>
							@foreach (var schedule in schedulesForDate)
							{
								<div class="clickable p-2 rounded border my-2">
									<div onclick="details(@schedule.ScheId)">
										<div>
											@schedule.ShiftName
										</div>
										<div class="fw-medium">
											@schedule.StartTime - @schedule.EndTime
										</div>
										<div class="fw-bold text-end text-@StatusClass(schedule.Attendance?.Status)">
											@(schedule.Attendance == null ? "Not Yet" : schedule.Attendance.Status)
										</div>
									</div>
									<div class="btn-group mt-2">
										@{
											var currentTime = TimeOnly.FromDateTime(DateTime.Now);
											if (schedule.EmpId.ToString() == userIdString && schedule.ScheDate == currentDate)
											{
												var clockInStart = schedule.StartTime?.AddMinutes(-30) ?? new TimeOnly(0, 0);
												var clockInEnd = schedule.StartTime?.AddMinutes(30) ?? new TimeOnly(0, 0);

												var clockOutStart = schedule.StartTime ?? new TimeOnly(0, 0);
												var clockOutEnd = schedule.EndTime?.AddMinutes(30) ?? new TimeOnly(0, 0);

												if (schedule.Attendance == null && currentTime.IsBetween(clockInStart, clockInEnd))
												{
													<button class="btn btn-primary btn-sm" onclick="confirmClockIn(@schedule.ScheId)">Clock In</button>
												}
												else if (schedule.Attendance?.Status == AttendanceStatus.ClockIn && currentTime.IsBetween(clockOutStart, clockOutEnd))
												{
													<button class="btn btn-primary btn-sm" onclick="confirmClockOut(@schedule.ScheId)">Clock Out</button>
												}
											}
										}
										@if (User.IsInRole("Manager") && schedule.Attendance == null)
										{
											<button class="btn btn-info btn-sm" onclick="edit(@schedule.ScheId)">Edit</button>
											<button class="btn btn-danger btn-sm" onclick="deleteAction(@schedule.ScheId)">Delete</button>
										}

									</div>
								</div>

							}
						</td>
					}
					else
					{
						<td></td>
					}
				}
			</tr>
		}
	}
}

<h1 class="mb-4 text-center">Schedules</h1>

<div class="d-grid row-gap-2 d-sm-flex justify-content-between rounded border shadow-sm p-3 mb-2">
	<div class="d-inline-block">
		@if (User.IsInRole("Manager"))
		{
			<button onclick="create()" class="btn btn-primary">Add New Schedule</button>
		}
	</div>

	<div class="d-inline-block">
		@if (weekSchedules != null)
		{
			foreach (var employeeSchedules in weekSchedules)
			{
				var todaysSchedules = employeeSchedules
				.Where(s => s.ScheDate == currentDate && s.Attendance?.Status != AttendanceStatus.ClockOut)
				.OrderBy(s => s.StartTime);

				if (!todaysSchedules.Any())
				{
					continue;
				}

				foreach (var schedule in todaysSchedules)
				{
					var currentTime = TimeOnly.FromDateTime(DateTime.Now);
					if (schedule.EmpId.ToString() == userIdString)
					{
						var clockInStart = schedule.StartTime?.AddMinutes(-30) ?? new TimeOnly(0, 0);
						var clockInEnd = schedule.StartTime?.AddMinutes(30) ?? new TimeOnly(0, 0);

						var clockOutStart = schedule.StartTime ?? new TimeOnly(0, 0);
						var clockOutEnd = schedule.EndTime?.AddMinutes(30) ?? new TimeOnly(0, 0);

						if (schedule.Attendance == null && currentTime.IsBetween(clockInStart, clockInEnd))
						{
							<button class="btn btn-primary" onclick="confirmClockIn(@schedule.ScheId)">Clock In</button>
						}
						else if (schedule.Attendance?.Status == AttendanceStatus.ClockIn && currentTime.IsBetween(clockOutStart, clockOutEnd))
						{
							<button class="btn btn-primary" onclick="confirmClockOut(@schedule.ScheId)">Clock Out</button>
						}
					}
				}
			}
		}
	</div>
</div>



@if (!Model.Any())
{
	<div class="text-center mt-5">
		<h2>No schedules available.</h2>
		<p>Please add some schedule.</p>
	</div>
}
else
{
	<div class="table-responsive">
		<table class="table table-bordered border-dark-subtle">
			<thead class="table-dark">
				<tr>
					<th class="align-content-center text-center" rowspan="2" style="width: 0">
						<form method="get" id="weekForm">
							<input id="week" type="week" class="border p-2 rounded" name="week" value="@requestWeek" />
						</form>
					</th>

					@foreach (DayOfWeek weekday in Enum.GetValues(typeof(DayOfWeek)).Cast<DayOfWeek>().OrderBy(day => (int)(day + 6) % 7))
					{
						<th class="fs-8">@weekday.ToString().Substring(0, 3)</th>
					}
				</tr>
				<tr id='dateRow' class="fs-6">
					@foreach (var day in weekDates)
					{
						<th>@day.ToString("MMM dd")</th>
					}
				</tr>
			</thead>
			<tbody>

				@foreach (var roleGroup in roleScheduleGroups)
				{
					if (roleGroup.Key)
					{
						<tr class="table-primary">
							<td class="fw-bold text-center fs-4" colspan="9">Managers</td>
						</tr>
					}
					else
					{
						<tr class="table-primary">
							<td class="fw-bold text-center fs-4" colspan="9">Staffs</td>
						</tr>
					}
					RenderScheduleCells(roleGroup);
				}
			</tbody>
		</table>
	</div>
}

<style>
	.clickable:hover {
		background-color: #ccc;
		box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
		transform: scale(1.01);
	}

</style>

<!-- Modal -->
<div class="modal fade" id="modal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="modalLabel" aria-hidden="true">
	<div class="modal-dialog modal-dialog-centered modal-lg modal-dialog-scrollable">
		<div class="modal-content" id="modalContent">
		</div>
	</div>
</div>

@functions {
	string StatusClass(Models.Entities.AttendanceStatus? status) => status switch
	{
		Models.Entities.AttendanceStatus.ClockIn => "primary",
		Models.Entities.AttendanceStatus.ClockOut => "success",
		Models.Entities.AttendanceStatus.Absent => "danger",
		_ => "dark"
	};
}

@section Scripts {
	<script>
		function create() {
			var url = '@Url.Action("Create", "Schedule")';
			$.get(url, function (response) {
				$('#modalContent').html(response);
				$('#modal').modal('show');
			});
		}
		function details(id) {
			var url = '@Url.Action("Details", "Schedule", new { id = "__id__" })'.replace("__id__", id);
			$.get(url, function (response) {
				$('#modalContent').html(response);
				$('#modal').modal('show');
			});
		}
		function edit(id) {
			var url = '@Url.Action("Edit", "Schedule", new { id = "__id__" })'.replace("__id__", id);
			$.get(url, function (response) {
				$('#modalContent').html(response);
				$('#modal').modal('show');
			});
		}
		function deleteAction(id) {
			var url = '@Url.Action("Delete", "Schedule", new { id = "__id__" })'.replace("__id__", id);
			$.get(url, function (response) {
				$('#modalContent').html(response);
				$('#modal').modal('show');
			});
		}
		function confirmClockIn(id) {
			var url = '@Url.Action("ConfirmClockIn", "Attendance", new { id = "__id__" })'.replace("__id__", id);
			$.get(url, function (response) {
				$('#modalContent').html(response);
				$('#modal').modal('show');
			});
		}
		function confirmClockOut(id) {
			var url = '@Url.Action("ConfirmClockOut", "Attendance", new { id = "__id__" })'.replace("__id__", id);
			$.get(url, function (response) {
				$('#modalContent').html(response);
				$('#modal').modal('show');
			});
		}
	</script>

	<script>
		$("#week").on("change", function () {
			$("#weekForm").submit();
		});
	</script>
}





