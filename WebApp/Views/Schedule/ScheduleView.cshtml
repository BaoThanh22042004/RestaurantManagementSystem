@using System.Globalization
@model IEnumerable<ScheduleViewModel>
@{
    ViewData["Title"] = "Schedule";
    Layout = "_DashboardLayout";
}

@{
    static List<DateOnly> listDate(string week)
    {
        List<DateOnly> list = new List<DateOnly>();

        string[] listS = week.Split('-');

        int year = int.Parse(listS[0]);

        int weekNumber = int.Parse(listS[1].Substring(1));

        DateOnly currentDate = DateOnly.FromDateTime(GetStartOfWeek(year, weekNumber));
        for (int i = 0; i < 7; i++)
        {
            list.Add(currentDate);
            currentDate = currentDate.AddDays(1);
        }
        return list;
    }

    static string GetCurrentWeek()
    {
        DateTime today = DateTime.Now;

        CultureInfo cul = CultureInfo.InvariantCulture;
        Calendar calendar = cul.Calendar;

        int weekNumber = cul.Calendar.GetWeekOfYear(
            today,
            CalendarWeekRule.FirstFourDayWeek,
            DayOfWeek.Monday
        );

        int year = today.Year;

        return $"{year}-W{weekNumber:D2}";
    }

    static DateTime GetStartOfWeek(int year, int weekNumber)
    {
        DateTime jan4 = new DateTime(year, 1, 4);

        int daysToMonday = (int)jan4.DayOfWeek - (int)DayOfWeek.Monday;
        if (daysToMonday < 0)
        {
            daysToMonday += 7;
        }

        DateTime startOfWeek1 = jan4.AddDays(-daysToMonday);

        DateTime resultDate = startOfWeek1.AddDays((weekNumber - 1) * 7);

        return resultDate;
    }

    DateOnly curDate = DateOnly.FromDateTime(DateTime.Now);
    List<DateOnly> dateList = listDate(Context.Request.Query["week"].ToString() == "" ? GetCurrentWeek() : Context.Request.Query["week"]);

}

<h1 class="mb-4">Schedule</h1>

<div class="mb-3">
    <button onclick="create()" class="btn btn-primary">Add New Schedule</button>
</div>

<form method="get" id="weekForm">
    <input id="week" type="week" class="mb-3" name="week" value="@(Context.Request.Query["week"].ToString() == "" ? GetCurrentWeek() : Context.Request.Query["week"])" />
</form>

@if (!Model.Any())
{
    <div class="no-shifts-message text-center mt-5">
        <h2>No schedules available.</h2>
        <p>Please add some schedule.</p>
    </div>
}
else
{
    @foreach (var nameList in Model.Where(s => s.ScheDate >= dateList[0] && s.ScheDate <= dateList[6]).GroupBy(s => s.EmployeeName))
    {
        var scheInDate = nameList.Where(sche => sche.ScheDate == DateOnly.FromDateTime(DateTime.Now)).OrderBy(t => t.StartTime);
        if (scheInDate.Any())
        {
            @foreach (var sche in scheInDate)
            {
                @if (sche.Attendance == null && sche.EmpId.ToString() == User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier).Value)
                {
                    <div class="mb-3">
                        <button class="btn btn-primary" onclick="confirmClockIn(@sche.ScheId)">Clock In</button>
                    </div>
                    break;
                }
                else if (sche.Attendance?.Status == Models.Entities.AttendanceStatus.ClockIn && sche.EmpId.ToString() == User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier).Value)
                {
                    <div class="mb-3">
                        <button class="btn btn-primary" onclick="confirmClockOut(@sche.ScheId)">Clock Out</button>
                    </div>
                    break;
                }
            }
        }
    }
    <table class="table table-bordered border border-3 border-primary">
        <thead>
            <tr class="fs-5">
                <th class="Name fs-6" colspan="2" rowspan="2">Staff's Name</th>
                <th>Mon</th>
                <th>Tues</th>
                <th>Wed</th>
                <th>Thurs</th>
                <th>Fri</th>
                <th>Sat</th>
                <th>Sun</th>
            </tr>
            <tr id='dateRow' class="fs-5">
                @foreach (var day in dateList)
                {
                    <th>@day.ToString("MMM dd")</th>
                }
            </tr>
        </thead>
        <tbody>
            <tr class="border border-3 border-primary non-selectable">
                <td class="rowName fw-bold" colspan="9">Managers</td>
            </tr>
            @foreach (var roleList in Model.Where(s => s.ScheDate >= dateList[0] && s.ScheDate <= dateList[6]).GroupBy(s => s.Role))
            {
                if (roleList.First().Role == Models.Entities.Role.Manager)
                {
                    foreach (var name in roleList.GroupBy(s => s.EmployeeName))
                    {
                        <tr>
                            <td class="Name fw-bold" colspan="2">
                                @roleList.First().EmployeeName
                            </td>
                            @for (var i = 0; i < 7; i++)
                            {
                                var scheInDate = name.Where(sche => sche.ScheDate == dateList[i]).OrderBy(t => t.StartTime);
                                if (scheInDate.Any())
                                {
                                    <td>
                                        @foreach (var sche in scheInDate)
                                        {
                                            <div onclick="details(@sche.ScheId)">
                                                <div class="shiftName">
                                                    @sche.ShiftName <br />
                                                </div>
                                                <div class="shiftTime">
                                                    @sche.StartTime
                                                    @sche.EndTime
                                                </div>
                                                <div class="attendanceStatus">
                                                    @(sche.Attendance == null ? "Not Yet" : sche.Attendance.Status)
                                                </div>
                                                <div>
                                                    @if (sche.Attendance == null && sche.EmpId.ToString() == User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier).Value && sche.ScheDate == curDate)
                                                    {
                                                        <button class="btn btn-primary" onclick="confirmClockIn(@sche.ScheId)">Clock In</button>
                                                    }
                                                    else if (sche.Attendance?.Status == Models.Entities.AttendanceStatus.ClockIn && sche.EmpId.ToString() == User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier).Value && sche.ScheDate == curDate)
                                                    {
                                                        <button class="btn btn-primary" onclick="confirmClockOut(@sche.ScheId)">Clock Out</button>
                                                    }
                                                </div>
                                            </div>
                                            <button onclick="edit(@sche.ScheId)">Edit</button>
                                        }
                                    </td>
                                }
                                else
                                {
                                    <td></td>
                                }
                            }
                        </tr>
                    }
                }
            }
            <tr class="border border-3 border-primary non-selectable">
                <td class="rowName" colspan="9" style="font-weight: bold">Staffs</td>
            </tr>
            @foreach (var roleList in Model.Where(s => s.ScheDate >= dateList[0] && s.ScheDate <= dateList[6]).GroupBy(s => s.Role))
            {
                if (roleList.First().Role != Models.Entities.Role.Manager)
                {
                    foreach (var name in roleList.GroupBy(s => s.EmployeeName))
                    {
                        <tr>
                            <td class="Name" colspan="2">
                                <div style="font-weight: bold">
                                    @roleList.First().EmployeeName
                                    (@roleList.First().Role)
                                </div>
                            </td>
                            @for (var i = 0; i < 7; i++)
                            {
                                var scheInDate = name.Where(sche => sche.ScheDate == dateList[i]).OrderBy(t => t.StartTime);
                                if (scheInDate.Any())
                                {
                                    <td>
                                        @foreach (var sche in scheInDate)
                                        {
                                            <div onclick="details(@sche.ScheId)" >
                                                <div class="shiftName">
                                                    @sche.ShiftName <br />
                                                </div>
                                                <div class="shiftTime">
                                                    @sche.StartTime
                                                    @sche.EndTime
                                                </div>
                                                <div class="attendanceStatus">
                                                    @(sche.Attendance == null ? "Not Yet" : sche.Attendance.Status)
                                                </div>
                                                <div>
                                                    @if (sche.Attendance == null && sche.EmpId.ToString() == User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier).Value && sche.ScheDate == curDate)
                                                    {
                                                        <button class="btn btn-primary" onclick="confirmClockIn(@sche.ScheId)">Clock In</button>
                                                    }
                                                    else if (sche.Attendance?.Status == Models.Entities.AttendanceStatus.ClockIn && sche.EmpId.ToString() == User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier).Value && sche.ScheDate == curDate)
                                                    {
                                                        <button class="btn btn-primary" onclick="confirmClockOut(@sche.ScheId)">Clock Out</button>
                                                    }
                                                </div>
                                            </div>
                                        }
                                    </td>
                                }
                                else
                                {
                                    <td>
                                    </td>
                                }
                            }
                        </tr>
                    }
                }
            }

        </tbody>
    </table>
}

<style>
    th, td {
        vertical-align: middle;
    }

    .table {
        border-collapse: collapse;
        width: 100%;
        text-align: center;
    }       
        .table div:hover {
            cursor: pointer;
            background-color: lightgrey;
        }

    th, td {
        vertical-align: middle;
        width: 12%;
    }

    .Name {
        width: 8%;
    }

    .rowName {
        cursor: default !important;
        background-color: transparent !important;
    }

    tbody td.selected {
        background-color: #b3d4fc;
    }

    .shiftName {
        text-align: left;
        font-weight: bold;
    }

    .shiftTime {
        text-align: left;
    }

    .attendanceStatus {
        text-align: right;
        font-weight: bold;
    }

    input[type="week"] {
        width: 15%;
        padding: 0.6%;
        font-size: 16px;
        border: 1px solid #ccc;
        border-radius: 6px;
    }

        input[type="week"]:focus {
            border-color: #007bff;
            box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
            outline: none;
        }
</style>

<!-- Modal -->
<div class="modal fade" id="modal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="modalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg modal-dialog-scrollable">
        <div class="modal-content" id="modalContent">
        </div>
    </div>
</div>

<script>

    const textElements = document.querySelectorAll(".attendanceStatus");

    textElements.forEach((textElement) => {
        const text = textElement.innerText;

        if (text === "ClockIn") {
            textElement.style.color = "blue";
        } else if (text === "ClockOut") {
            textElement.style.color = "green";
        } else if (text === "Absent") {
            textElement.style.color = "red";
        } else {
            textElement.style.color = "black";
        }
    });
</script>

@section Scripts {
    <script>
        function create() {
            var url = '@Url.Action("Create", "Schedule")';
            $.get(url, function (response) {
                $('#modalContent').html(response);
                $('#modal').modal('show');
            });
        }
        function details(id) {
            var url = '@Url.Action("Details", "Schedule", new { id = "__id__" })'.replace("__id__", id);
            $.get(url, function (response) {
                $('#modalContent').html(response);
                $('#modal').modal('show');
            });
        }
        function edit(id) {
            var url = '@Url.Action("Edit", "Schedule", new { id = "__id__" })'.replace("__id__", id);
            $.get(url, function (response) {
                $('#modalContent').html(response);
                $('#modal').modal('show');
            });
        }
        function deleteAction(id) {
            var url = '@Url.Action("Delete", "Schedule", new { id = "__id__" })'.replace("__id__", id);
            $.get(url, function (response) {
                $('#modalContent').html(response);
                $('#modal').modal('show');
            });
        }
        function confirmClockIn(id) {
            var url = '@Url.Action("ConfirmClockIn", "Attendance", new { id = "__id__" })'.replace("__id__", id);
            $.get(url, function (response) {
                $('#modalContent').html(response);
                $('#modal').modal('show');
            });
        }
        function confirmClockOut(id) {
            var url = '@Url.Action("ConfirmClockOut", "Attendance", new { id = "__id__" })'.replace("__id__", id);
            $.get(url, function (response) {
                $('#modalContent').html(response);
                $('#modal').modal('show');
            });
        }
    </script>

    <script>
        $("#week").on("change", function () {
            $("#weekForm").submit();
        });
    </script>
}





